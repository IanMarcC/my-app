{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["newsapi","require","ArticleList","article","this","list","push","item","index","className","forEach","displayList","FullBar","props","state","source","keyword","handleInputChange","bind","handleOptionChange","event","setState","target","value","id","onChange","type","placeholder","React","Component","App","console","log","v2","everything","q","sources","domains","then","response","form","onClick","document","getElementById","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gNAKMA,G,MAAU,IADAC,EAAQ,IACR,CAFA,qCAkCVC,E,WACL,aAAgB,oB,uDAILC,GACVC,KAAKC,KAAKC,KAAKH,K,kCAIJI,EAAMC,GACjB,OACA,yBAAKC,UAAU,c,+BAOf,OACA,6BACAL,KAAKC,KAAKK,QAAQN,KAAKO,iB,KAKnBC,E,YACL,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,MAAQ,CAACC,OAAQ,WAAYC,QAAS,IAC3C,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,mBAAqB,EAAKA,mBAAmBD,KAAxB,gBAJR,E,+EAMDE,GACjBhB,KAAKiB,SAAS,CAACL,QAASI,EAAME,OAAOC,U,yCAEnBH,GAClBhB,KAAKiB,SAAS,CAACN,OAAQK,EAAME,OAAOC,U,+BAGpC,OACC,yBAAKd,UAAU,aACf,0BAAMe,GAAG,SACT,4BAAQD,MAAOnB,KAAKU,MAAMS,MAAOE,SAAUrB,KAAKe,mBAAoBK,GAAG,aACvE,4BAAQD,MAAM,YAAd,aAEA,2BAAOG,KAAK,OAAOH,MAAOnB,KAAKU,MAAME,QAASW,YAAY,UAAUF,SAAUrB,KAAKa,kBAAmBO,GAAG,oB,GApBtFI,IAAMC,WAmDJD,IAAMC,U,IAUfC,EAlCf,WAcC,OAJc,IAAI5B,EAClB6B,QAAQC,IAAI,QACZhC,EAAQiC,GAAGC,WAAW,CAACC,EAAG,MAAMC,QAAS,WAAYC,QAAQ,cAAcC,MAAK,SAAAC,GAC9ER,QAAQC,IAAIO,MAEd,yBAAK9B,UAAU,OACf,8CACA,kBAAC,EAAD,MACA,4BAAQ+B,KAAK,QAAQC,QAjBrB,WACC,IAAIzB,EAAU0B,SAASC,eAAe,aAAapB,MACnDQ,QAAQC,IAAIhB,GACZ,IAAID,EAAS2B,SAASC,eAAe,aAAapB,MAIlD,OAHAQ,QAAQC,IAAIjB,GACXf,EAAQiC,GAAGC,WAAW,CAACC,EAAG,MAAMC,QAAS,WAAYC,QAAQ,cAAcC,MAAK,SAAAC,GAChFR,QAAQC,IAAIO,MACN,MAWPb,KAAK,UADN,YChGmBkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASR,SAASC,eAAe,SD2H3C,kBAAmBQ,WACrBA,UAAUC,cAAcC,MAAMf,MAAK,SAAAgB,GACjCA,EAAaC,iB","file":"static/js/main.c32745e7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nconst API_KEY = '3166070d283249a5aedda56abddc8d0d';\r\nconst NewsAPI = require('newsapi');\r\nconst newsapi = new NewsAPI(API_KEY);\r\n\r\nclass NewsSite {\r\n\tconstructor(name, tag){\r\n\t\tthis.name = name;\r\n\t\tthis.tag = tag;\r\n\t}\r\n\tgetName() {\r\n\t\treturn this.name;\r\n\t}\r\n\tgetTag() {\r\n\t\treturn this.tag;\r\n\t}\r\n}\r\n\r\nclass Article {\r\n\tconstructor (title, description) {\r\n\t\tthis.title = title;\r\n\t\tthis.description = description;\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t<div className=\"indivarticle\">\r\n\t\t<h3><b>{this.title}</b></h3>\r\n\t\t<br></br>\r\n\t\t<p>{this.description}</p>\r\n\t\t<br></br>\r\n\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass ArticleList {\r\n\tconstructor () {\r\n\t\tvar list = [];\r\n\t}\r\n\t\r\n\taddArticle(article) {\r\n\t\tthis.list.push(article);\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tdisplayList(item, index) {\r\n\t\treturn (\r\n\t\t<div className=\"dynlist\">\r\n\t\t</div>\r\n\t\t);\r\n\t\t\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t<hr></hr>,\r\n\t\tthis.list.forEach(this.displayList));\r\n\t}\r\n}\r\n\r\n\r\nclass FullBar extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {source: 'bbc-news', keyword: ''};\r\n\t\tthis.handleInputChange = this.handleInputChange.bind(this);\r\n\t\tthis.handleOptionChange = this.handleOptionChange.bind(this);\r\n\t}\r\n\thandleInputChange(event) {\r\n\t\tthis.setState({keyword: event.target.value});\r\n\t}\r\n\thandleOptionChange(event) {\r\n\t\tthis.setState({source: event.target.value});\r\n\t}\r\n\trender()  {\r\n\t\treturn (\r\n\t\t\t<div className=\"searchBar\">\r\n\t\t\t<form id=\"form1\">\r\n\t\t\t<select value={this.state.value} onChange={this.handleOptionChange} id=\"selectbox\">\r\n\t\t\t<option value=\"bbc-news\">BBC News</option>\r\n\t\t\t</select>\r\n\t\t\t<input type=\"text\" value={this.state.keyword} placeholder=\"trudeau\" onChange={this.handleInputChange} id=\"searchbox\"></input>\r\n\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n}\r\n\r\nfunction App() {\r\n\tfunction keywordSearch() {\r\n\t\tvar keyword = document.getElementById(\"searchbox\").value;\r\n\t\tconsole.log(keyword);\r\n\t\tvar source = document.getElementById(\"selectbox\").value;\r\n\t\tconsole.log(source);\r\n\t\t\tnewsapi.v2.everything({q: 'oil',sources: 'bbc-news', domains:'bbc.co.uk'}).then(response => {\r\n\t\t\tconsole.log(response);});\r\n\t\treturn null;\r\n\t\t}\r\n\tconst alist = new ArticleList;\r\n\tconsole.log(\"meme\");\r\n\tnewsapi.v2.everything({q: 'oil',sources: 'bbc-news', domains:'bbc.co.uk'}).then(response => {\r\n\t\t\tconsole.log(response);});\r\n\treturn (\r\n\t<div className=\"App\">\r\n\t<h1>News Aggregate</h1>\r\n\t<FullBar />\r\n\t<button form=\"form1\" onClick={keywordSearch}\r\n\t type=\"submit\">Search</button>\r\n\t</div>\r\n\t);\r\n}\r\n\r\nclass SearchBox extends React.Component {\r\n\trender() {\r\n\t\treturn (<input type=\"text\" placeholder=\"Enter keyword/phrase\" name=\"searchbox\"></input>);\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default App;\r\n\t","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}